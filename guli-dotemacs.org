#+TITLE: Emacs configuration of Guo Peng Li
#+OPTIONS: toc:4 h:4

* Configuration
** About this file
<<babel-init>>

Copied from Sacha.org.

To be precise, this is what's in the first part of my =~/.emacs.d/init.el= (what used to be the =~/.emacs= file):

#+begin_src emacs-lisp  :tangle no
;; This sets up the load path so that we can override it
(package-initialize nil)

;; Override the packages with the git version of Org and other packages
;; (add-to-list 'load-path "~/elisp/org-mode/lisp")
;; (add-to-list 'load-path "~/elisp/org-mode/contrib/lisp")

;; Load the rest of the packages
(package-initialize t)
(setq package-enable-at-startup nil)
(org-babel-load-file "~/.emacs.d/guli-dotemacs.org")
#+end_src

** Personal information
#+begin_src emacs-lisp
  (setq user-full-name "Guo Peng Li"
        user-mail-address "liguopeng@liguopeng.net")
#+end_src
      
** Emacs initialization
*** Add my elisp directory and other files
    
Sometimes I load files outside the package system. As long as they're
in a directory in my load-path=, Emacs can find them.

#+begin_src emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  
  (require 'use-package)
#+end_src

*** Add package sources
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
#+end_src
    
*** Melpa

#+begin_src  emacs-lisp :tangle no
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)
#+end_src

*** EL-GET
#+begin_src emacs-lisp :tangle no
  (unless (require 'el-get nil t)
    (url-retrieve
     "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
     (lambda (s)
       (end-of-buffer)
            (eval-print-last-sexp))))

  (require 'el-get)

  (setq el-get-user-package-directory "~/.emacs.d/lisp")
  (el-get 'sync)
#+end_src

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

*** Set scratch message
#+begin_src emacs-lisp
(setq-default initial-scratch-message
              (concat ";; Happy hacking " (or user-login-name "") "!\n\n"
                      ";; 自立 - 积极主动；以终为始；要事第一；\n;; 互赖 - 双赢思维；知彼知己；综合综效。\n"
                      ";; 重视自己的影响圈而不是关注圈。\n\n"
                      ";; 士不可以不弘毅，任重而道远。\n"
                      ";; 弘，宽广也。毅，强忍也。非弘不能胜其重，非毅无以致其远。\n"
                      ";; 仁以为己任，不亦重乎？死而后已，不亦远乎？\n\n"
                      ))
#+end_src

*** Debug 
#+begin_src emacs-lisp 
(setq debug-on-error t)
#+end_src

* General configuration
** Backups
This is one of the things people usually want to change right away. By
default, Emacs saves backup files in the current directory. These are the
files ending in =~= that are cluttering up your directory lists. The following
code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x
C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(if (not (file-exists-p (expand-file-name "~/.emacs.d/backups")))
    (make-directory (expand-file-name "~/.emacs.d/backups"))
    )
(setq
 backup-by-coping t
 backup-directory-alist '(("." . "~/.emacs.d/backups"))
 )
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq kept-new-versions 6)
  (setq kept-old-versions 2)

  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/backups" t)))

  (setq make-backup-files t)
#+end_src

** History
    From [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html]]
#+begin_src emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+end_src
** Windows configuration
    When you're starting out, tooltips, menus, and the tool bar can be very
    helpful. [[http://sachachua.com/blog/2014/03/emacs-basics-using-mouse/][(Emacs Basics: Using the Mouse]]). Eventually, you may want to
    reclaim that extra little bit of screenspace. The following code turns
    those things off when using a graphical Emacs.
    
#+begin_src emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode t)
    (scroll-bar-mode -1))
#+end_src

** Winner mode - undo and redo window configuration

    =winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch between
    window configurations. This is handy when something has popped up a buffer
    that you want to look at briefly before returning to whatever you were
    working on. When you're done, press =C-c <left>=.

#+begin_src emacs-lisp
  (setq winner-dont-bind-my-keys t)

  (use-package winner
    :ensure winner
    :init (winner-mode 1))
  (winner-mode t)

  (global-set-key (kbd "C-x w u") 'winner-undo)
  (global-set-key (kbd "C-x w r") 'winner-redo)
#+end_src
** Sentences end
    In my world, sentences end with a single space. This makes sentence
    navigation commands work for me.
    
#+begin_src emacs-lisp
  (setq sentence-end "([。！？]|……|[.?!][]\"')}]*($|[ \t]))[ \t\n]*")
  (setq sentence-end-double-space nil)
#+end_src

** Indent - tab and space 
#+begin_src emacs-lisp
  (defun guli/indent-or-complete ()
    (interactive)
    (if (looking-at "\\>")
        (hippie-expand nil)
      (indent-for-tab-command))
    )

  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)
  (setq thrift-indent-level 4)

  ;; not supported by on emacs 23
  (setq-default line-spacing 2)
#+end_src

** Change "yes or no" to "y or n"
    Lazy people like me never want to type "yes" when "y" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Command completion
#+begin_src emacs-lisp
;; obsoleted in 24.1
;; (partial-completion-mode 1) 

(icomplete-mode 1) 
#+end_src
** Display datetime

#+begin_src emacs-lisp
  (display-time-mode 1)
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
#+end_src

** Paren mode
#+begin_src emacs-lisp
  (show-paren-mode t)
  (setq show-paren-style 'parentheses)
#+end_src

** Encoding 
#+begin_src emacs-lisp


  (prefer-coding-system 'utf-8-unix)
  (set-buffer-file-coding-system 'utf-8-unix) 
  (setq default-buffer-file-coding-system 'utf-8-unix)
#+end_src
** Color of shell mode
#+begin_src emacs-lisp
  (ansi-color-for-comint-mode-on)
#+end_src

** Mark
#+begin_src emacs-lisp
  ;; highlight the region
  (transient-mark-mode t)

  (defun lgp-mark-char()
    "Set mark at current point and move cursor to next char."
    (interactive)
    (push-mark (point))
    (forward-char))

  (defun lgp-mark-word()
    "Set mark at current point and move cursor to the end of the word."
    (interactive)
    (push-mark (point))
    (forward-word))

  (defun lgp-mark-sentence()
    "Set mark at current point and move cursor to the end of the sentence."
    (interactive)
    (push-mark (point))
    (forward-sentence))

  (global-set-key [(control shift f)] 'lgp-mark-char)
  (global-set-key [(meta shift f)] 'lgp-mark-word)
  (global-set-key [(meta shift e)] 'lgp-mark-sentence)
#+end_src

** Bookmark
#+begin_src emacs-lisp
  (global-set-key [(f9)] 'list-bookmarks)
  (global-set-key [(f2)] 'set-mark-command)
#+end_src

** Registers
#+begin_src emacs-lisp
  ;; functions for temp bookmarks
  ;; C-. set a bookmark 
  ;; C-, jump to previous bookmark
  (global-set-key (kbd "C-.") 'guli/point-to-register)
  (global-set-key (kbd "C-,") 'guli/jump-to-register)

  (defun guli/point-to-register()
    "Store cursorposition _fast_ in a register. 
  Use my-jump-to-register to jump back to the stored 
  position."
    (interactive)
    (setq zmacs-region-stays t)
    (point-to-register 8))

  (defun guli/jump-to-register()
    "Switches between current cursorposition and position
  that was stored with my-point-to-register."
    (interactive)
    (setq zmacs-region-stays t)
    (let ((tmp (point-marker)))
          (jump-to-register 8)
          (set-register 8 tmp)))
#+end_src

** Highlight line
#+begin_src emacs-lisp
  (hl-line-mode 1)
  (setq global-hl-line-mode t)
#+end_src

** ido
#+begin_src emacs-lisp
  (require 'ido)
  (ido-mode t)
#+end_src

** ibuffer
#+begin_src emacs-lisp
  (require 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Text mode
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 
           '(lambda()
              (setq indent-tabs-mode nil)))
#+end_src

** Tramp 
#+begin_src emacs-lisp
  ;; (require 'tramp)
  ;; (setq tramp-default-method "plink"
  ;;       tramp-password-end-of-line "\r\n"
  ;; ;      tramp-default-user "root"      
  ;;    tramp-default-host "59.151.15.39")

  ;; (add-to-list
  ;;  'tramp-multi-connection-function-alist
  ;;  '("gateway-andover" tramp-multi-connect-rlogin "plink -ssh -A -l %u %h %n"))
#+end_src

** F-keys
#+begin_src emacs-lisp
(global-set-key [f1]    'help)
(global-set-key [f2]    'org-insert-todo-heading)
(global-set-key [f6]    'shell)
(global-set-key [f7]    'text-mode)
(global-set-key [f8]    'outline-mode)

(define-key global-map [(f5)] 'revert-buffer)
(global-set-key [f7] 'calendar)
(global-set-key [f8] 'other-window)
(global-set-key [f9] 'view-mode)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'gdb)
(global-set-key (kbd "C-c C-o") 'occur)

(global-set-key [(meta f12)] 'speedbar)
(global-set-key [(f1)] 'delete-other-windows)
#+end_src

** Template 
#+begin_src emacs-lisp
(require 'template)
(template-initialize)
(setq template-default-directories (cons "~/.emacs.d/templates" template-default-directories))
#+end_src

** Color theme
#+begin_src emacs-lisp
  ;; (require 'color-theme)
  ;; (color-theme-initialize)
  ;; (setq color-theme-is-global t)

  ;; (load-library "color-theme-library")

  ;; (color-theme-robin-hood)
  ;; great for html generation
  ;; (color-theme-pierson) 
  ;; (color-theme-gnome2)
  ;; (color-theme-gray30)
  ;; (color-theme-comidia)
  ;; (color-theme-gray1)
  ;; (color-theme-oswald)

  ;;(require 'zenburn)
  ;; (color-theme-zenburn)
  ;; (color-theme-gray30)
#+end_src

** Scrolling
#+begin_src emacs-lisp
  (setq scroll-margin 5
        scroll-conservatively 10000)

  ;; increase the sroll speed of large files
  (setq lazy-lock-defer-on-scrolling t)

  (defun guli/hold-line-scroll-up()
    "Scroll the page with the cursor in the same line"
    (interactive)
    (scroll-up 1))

  (defun guli/hold-line-scroll-down()
    "Scroll the page with the cursor in the same line"
    (interactive)
    (scroll-down 1))

  (global-set-key (kbd "M-n") 'guli/hold-line-scroll-up)
  (global-set-key (kbd "M-p") 'guli/hold-line-scroll-down)
#+end_src

** Date and time
#+begin_src emacs-lisp
  (defun guli/current-date()
    (interactive)
    (shell-command "date '+%Y-%m-%d'"))

  (defun guli/insert-current-date ()
    (interactive)
    (insert (format-time-string "%Y-%m-%d" (current-time))))

  (defun guli/insert-current-time ()
    (interactive)
   (insert (format-time-string "%H:%M " (current-time))))

  (define-key global-map [(meta f11)] 'guli/insert-current-date)
  (define-key global-map [(meta f12)] 'guli/insert-current-time)

  (defun guli/insert-date ()
    "Insert date-time at cursor."
    (interactive)
    ;; (insert (format-time-string "%Y/%m/%d %H:%M:%S" (current-time)))
    ;; (insert (format-time-string "%Y/%m/%d" (current-time)))
    (insert (format-time-string "%Y/%m/%d w%W %a" (current-time)))
    )

  (global-set-key (kbd "C-c m d") 'guli/insert-date)
#+end_src

** Comments
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
#+end_src

** Undo tree mode - visualize your undos and branches
   People often struggle with the Emacs undo model, where there's really no
   concept of "redo" - you simply undo the undo.

   This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the
   changes you've made, undo back to a certain point (or redo), and go down
   different branches.

#+begin_src emacs-lisp :tangle no
  (use-package undo-tree
    :ensure undo-tree
    :diminish undo-tree-mode
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src
      
** Killing text
   From https://github.com/itsjeyd/emacs-config/blob/emacs24/init.el

#+begin_src emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
      (if mark-active (list (region-beginning) (region-end))
        (list (line-beginning-position)
          (line-beginning-position 2)))))
#+end_src
   
** Customization from menu
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/lisp/guli-custom.el") 
(load custom-file)
#+end_src

** Spell check
   Please install aspell on mac and linux to enable =flyspell=.
   
#+begin_src shell-script :tangle no
brew install aspell
#+end_src
   
** Process query
#+begin_src emacs-lisp
 ;; (set-process-query-on-exit-flag ad-return-value nil)
#+end_src
** Others
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)

(setq visible-bell nil)
(setq default-fill-column 78)
(setq inhibit-startup-message t)
(setq line-number-mode t)
(setq column-number-mode t)

(setq kill-whole-line t)

(setq require-final-newline t)

(setq default-major-mode 'text-mode)

(auto-image-file-mode)

(mouse-avoidance-mode 'animate)

(put 'upcase-region 'disabled nil)

(global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

** Keyboard Macro
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-xe" 'kmacro-end-and-call-macro)
#+END_SRC
* Performacs
#+begin_src emacs-lisp
(if (>= emacs-major-version 25)
    (remove-hook 'find-file-hooks 'vc-refresh-state)
  (remove-hook 'find-file-hooks 'vc-find-file-hook))

(setq garbage-collection-messages t)

(setq gc-cons-threshold (* 511 1024 1024))
(setq gc-cons-percentage 0.5)
(setq garbage-collection-messages t)

(run-with-idle-timer 5 t #'garbage-collect)
#+END_SRC

* Navigation
** Cursor
#+begin_src emacs-lisp
(defun guli/goto-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `guli/goto-char-key' again will move forwad to the next Nth
occurence of CHAR."
  
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char) char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))

(define-key global-map (kbd "C-z") 'guli/goto-char)
#+end_src

** Pop to mark
   Handy way of getting back to previous places.
   
#+begin_src emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+end_src

** Text size
#+begin_src emacs-lisp
(bind-key "C-+" 'text-scale-increase)
(bind-key "C--" 'text-scale-decrease)
#+end_src

** Windmove - switching between windows
   Windmove lets you move between windows with something more natural than
   cycling through =C-x o= (=other-window=).
   
   Windmove doesn't behave well with Org, so we need to use different keybindings.

#+begin_src emacs-lisp
  (use-package windmove
               :bind
               (("C-c <right>" . windmove-right)
                ("C-c <left>" . windmove-left)
                ("C-c <up>" . windmove-up)
                ("C-c <down>" . windmove-down)))
#+end_src

** Make window splitting more useful

Copied from http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury
#+begin_src emacs-lisp
(defun guli/vsplit-last-buffer (prefix)
  "Split the window vertically and display the previous buffer."
  (interactive "p")
  (split-window-vertically)
  (other-window 1 nil)
  (unless prefix
    (switch-to-next-buffer)))
(defun guli/hsplit-last-buffer (prefix)
  "Split the window horizontally and display the previous buffer."
  (interactive "p")
  (split-window-horizontally)
  (other-window 1 nil)
  (unless prefix (switch-to-next-buffer)))
(bind-key "C-x 2" 'guli/vsplit-last-buffer)
(bind-key "C-x 3" 'guli/hsplit-last-buffer)

#+end_src

** Move to beginning of line
Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

#+begin_src emacs-lisp
(defun guli/smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'guli/smarter-move-beginning-of-line)
#+end_src

** Narrowing

From http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
#+begin_src emacs-lisp
(add-to-list 'load-path "~/elisp/recursive-narrow")
(defun guli/recursive-narrow-dwim-org ()
    (if (derived-mode-p 'org-mode) 
         (cond ((or (org-at-block-p) (org-in-src-block-p)) (org-narrow-to-block))
               (t (org-narrow-to-subtree))))
)
(use-package recursive-narrow
  :config
  (add-hook 'recursive-narrow-dwim-functions 'guli/recursive-narrow-dwim-org)
  :bind
  (("C-x n w" . recursive-widen)
   ("C-x n n" . recursive-narrow-or-widen-dwim)))
#+end_src

* Editing
  =visual-line-mode= is so much better than =auto-fill-mode=. It doesn't actually
  break the text into multiple lines - it only looks that way.

#+begin_src emacs-lisp
(remove-hook 'text-mode-hook 'turn-on-auto-fill)

;; disable this to improve orgmode performance
;; (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
 
* Window and buffer
** Emacs windows
#+begin_src emacs-lisp
(windmove-default-keybindings)

(require 'window-numbering)
(window-numbering-mode 1)
#+end_src

** Emacs buffers
#+begin_src emacs-lisp
(defun guli/kill-buffer-and-window()
  (interactive)
  (kill-buffer-and-window))

(defun guli/kill-buffer()
  (interactive)
  (ido-kill-buffer))

(global-set-key [C-f4] 'guli/kill-buffer-and-window)
(global-set-key [C-f3] 'guli/kill-buffer)

; (global-set-key [(control tab)] 'next-buffer)
#+end_src

* Programming
** lua
#+BEGIN_SRC emacs-lisp
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+END_SRC

** Python
*** Python Indent
#+begin_src emacs-lisp
; python auto indent
(add-hook 'python-mode-hook
      '(lambda()
         (local-set-key
          "\r"
          '(lambda()
         (interactive)
         (insert "\n")
         (python-indent-line)))))

; indent python code with spaces
(add-hook 'python-mode-hook
          '(lambda()
             (setq indent-tabs-mode nil)))
#+end_src

*** Pymacs
#+BEGIN_SRC emacs-lisp :tangle no
(setq ropemacs-global-prefix nil)

(load-file "~/.emacs.d/emacs-for-python/epy-init.el")

(require 'pymacs)
(pymacs-load "ropemacs" "rope-")

;; If you want to enable them manually
;; (add-to-list 'load-path "~/.emacs.d/emacs-for-python/")
;; (require 'epy-setup)      ;; It will setup other loads, it is required!
;; (require 'epy-python)     ;; If you want the python facilities [optional]
;; (require 'epy-completion) ;; If you want the autocompletion settings [optional]
;; (require 'epy-editing)    ;; For configurations related to editing [optional]
;; (require 'epy-bindings)   ;; For my suggested keybindings [optional]
;; (require 'epy-nose)       ;; For nose integration
#+END_SRC

#+begin_src language
   
#+end_src

** Thrift
#+BEGIN_SRC emacs-lisp
(require 'thrift-mode)
(add-to-list 'auto-mode-alist '("\\.thrift$" . thrift-mode))
#+END_SRC
** Objective-C
#+BEGIN_SRC emacs-lisp
(add-to-list 'magic-mode-alist
             `(,(lambda ()
                  (and (string= (file-name-extension buffer-file-name) "h")
                       (re-search-forward "@\\<interface\\>" 
                                          magic-mode-regexp-match-limit t)))
               . objc-mode))
#+END_SRC
** GN Mode
#+begin_src emacs-lisp
(require 'gn-mode)
#+end_src
** neotree
#+begin_src emacs-lisp
;; (add-to-list 'load-path "/some/path/neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
#+end_src

* Font and face
** Font lock
#+begin_src emacs-lisp
  (global-font-lock-mode 1)
  ;; (setq font-lock-maximum-decoration t)
#+end_src

** Chinese
#+begin_src emacs-lisp :tangle no
(when *win32*
  (set-face-attribute 'default nil :font "Consolas 19")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family "Microsoft Yahei" :size 42)))
  )

(when *win32*
  (set-face-attribute 'default nil :font "Consolas 15")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family "Microsoft Yahei" :size 19)))
    ;; (setq face-font-rescale-alist '(("Microsoft Yahei" . 1.2) ("WenQuanYi Micro Hei" . 1.2)))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; (set-default-font "DejaVu Sans Mono")
(when *win32*
  (set-face-attribute 'default nil :font "Consolas 12")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family "Microsoft Yahei" :size 22)))
    (setq face-font-rescale-alist '(("微软雅黑" . 1.2) ("Microsoft Yahei" . 1.2) ("WenQuanYi Micro Hei" . 1.2)))
  )
;;; 这是一个中文字符串，用于中文字体的等宽测试
;;; a chinese string for monospace testing....
#+end_src

#+begin_src emacs-lisp
;; (set-default-font "DejaVu Sans Mono")
(when *win32*
  (set-face-attribute 'default nil :font "Consolas 12")
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family "Microsoft Yahei")))
    (setq face-font-rescale-alist '(("微软雅黑" . 1.15) ("Microsoft Yahei" . 1.15) ("WenQuanYi Micro Hei" . 1.15)))
  )
;;; 这是一个中文字符串，用于中文字体的等宽测试
;;; a chinese string for monospace testing....
#+end_src

   ;;; 这是一个中文字符串，用于中文字体的等宽测试
   ;;; a chinese string for monospace testing....
   
   - 零一二三四五六七八九.零一二三四五六七八九.零一二三四五六七八九
   - 00112233445566778899.00112233445566778899.00112233445566778899
     
** Custom
#+begin_src emacs-lisp :tangle no
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(comint-highlight-prompt ((t (:foreground "light sky blue"))))
 '(font-lock-comment-face ((t (:foreground "medium aquamarine" :slant italic))))
 '(org-level-1 ((t (:foreground "forest green"))))
 '(window-numbering-face ((t (:foreground "DeepPink" :underline "DeepPink" :weight bold))) t)
)
#+end_src

* Session and desktop
** Session
#+begin_src emacs-lisp
  (require 'session)
  (add-hook 'after-init-hook 'session-initialize)
#+end_src

** Desktop
#+begin_src emacs-lisp
;; (load "desktop")
;; (desktop-load-default)
;; (desktop-read);; (desktop-save-mode 1)
#+end_src

* Tabber
#+begin_src emacs-lisp
  ;; (require 'tabbar)
  ;; (tabbar-mode 1)
  ;; (setq tabbar-buffer-groups-function
  ;;        (lambda (buffer) (list "All buffers")))

  ;; (global-set-key [C-M-left] 'tabbar-backward-group)
  ;; (global-set-key [C-M-right] 'tabbar-forward-group)
  ;; (global-set-key [C-left] 'tabbar-backward-tab)
  ;; (global-set-key [C-right] 'tabbar-forward-tab)
  ;; (global-set-key [C-tab] 'tabbar-forward-tab)

  ;; ;; ignore some special buffers (don't display them in tabs)
  ;; (setq tabbar-buffer-groups-function 'tabbar-buffer-ignore-groups)

  ;; (defun tabbar-buffer-ignore-groups (buffer)
  ;;   "Return the *LIST OF GROUP NAMES* buffer belongs to."
  ;;   (with-current-buffer (get-buffer buffer)
  ;;     (cond
  ;;      ((eq major-mode 'dired-mode)
  ;;       '("Dired")                        ; directories
  ;;       )
  ;;      ((memq major-mode
  ;;             '(help-mode apropos-mode Info-mode Man-mode))
  ;;       '("Help")                         ; help informations
  ;;       )
  ;;      ((memq major-mode
  ;;             '(org-mode muse-mode))
  ;;       '("Notes")
  ;;       )
  ;;      ((memq major-mode
  ;;             '(conf-mode))
  ;;       '("Config")
  ;;       )
  ;;      ((not (string= "*" (substring (buffer-name) 0 1)))
  ;;       '("default")                      ; all except emacs buffers
  ;;       )
  ;; ;;      (t
  ;; ;;       '("default")
  ;; ;;        (list 
  ;; ;;        "default"  ;; no-grouping
  ;; ;;        (if (and (stringp mode-name) (string-match "[^ ]" mode-name))
  ;; ;;            mode-name
  ;; ;;          (symbol-name major-mode)))
  ;; ;;       )
  ;;      )))

  ;; (custom-set-faces
  ;;   ;; custom-set-faces was added by Custom.
  ;;   ;; If you edit it by hand, you could mess it up, so be careful.
  ;;   ;; Your init file should contain only one such instance.
  ;;   ;; If there is more than one, they won't work right.
  ;;  '(tabbar-selected-face ((t (:inherit tabbar-default-face :background "#102e4e" :foreground "green" :box (:line-width 2 :color "#102e4e" :style released-button)))))
  ;;  '(tabbar-unselected-face ((t (:inherit tabbar-default-face :foreground "#102e4e" :box (:line-width 2 :color "white" :style pressed-button))))))
#+end_src

* Treemacs
#+BEGIN_SRC emacs-lisp :tangle no
(define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
#+END_SRC
* Folding
#+begin_src emacs-lisp
  (autoload 'folding-mode "folding" 
    "Minor mode that simulates a folding editor" t) 
#+end_src
* Org
** Init orgmode
#+begin_src emacs-lisp
; (eval-after-load "org" '(require 'ox-html nil t))
; (add-to-list 'load-path "~/.emacs.d/elpa/org-20160125")

;; Install the latest org package
;; M-x package-install org
;;
;; Then modify function org-html-final-function in ox-html.el:
;; ;; (set-auto-mode t)
;; (html-mode)
(require 'org-install)

;(setq org-fontify-done-headline t)
(setq org-hide-emphasis-markers t)
;(setq org-hide-leading-stars t)
;(setq org-reverse-note-order t)
;(setq org-tags-column -120)
(setq org-startup-indented nil)

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

(global-set-key "\C-cl" 'org-store-link)   ; store line
(global-set-key "\C-ca" 'org-agenda)       ; agenda view
(global-set-key "\C-cb" 'org-iswitchb)     ; switch to org buffer

(add-hook 'org-mode-hook 'turn-on-font-lock)

(define-key mode-specific-map [\C-ca] 'org-agenda)

;; show todo-list defined in current file
(defun guli/task-list()
  (interactive)
  (occur "TODO"))
#+end_src
** Directories
#+begin_src emacs-lisp
(setq org-directory "~/private/org/")

(setq org-default-notes-file "~/private/org/notes.org")

;; show which events should be listed in agenda view
(setq org-agenda-files
      (list "~/private/org/todo/todo-work.org"
            "~/private/org/todo/todo-personal.org"
            ))
#+end_src

** After load
#+begin_src emacs-lisp
(eval-after-load "org"
  ;; '(progn
  '(progn
     (define-prefix-command 'org-todo-state-map)
     (define-key org-mode-map "\C-cx" 'org-todo-state-map)
     (define-key org-todo-state-map "x"
       #'(lambda nil (interactive) (org-todo "CANCELLED")))
     (define-key org-todo-state-map "d"
       #'(lambda nil (interactive) (org-todo "DONE")))
     (define-key org-todo-state-map "f"
       #'(lambda nil (interactive) (org-todo "DEFERRED")))
     (define-key org-todo-state-map "l"
       #'(lambda nil (interactive) (org-todo "DELEGATED")))
     (define-key org-todo-state-map "s"
       #'(lambda nil (interactive) (org-todo "STARTED")))
     (define-key org-todo-state-map "w"
       #'(lambda nil (interactive) (org-todo "WAITING")))
     ))
#+end_src
** Org-Agenda
#+begin_src emacs-lisp
(require 'org-agenda)
; (org-defkey org-agenda-mode-map "\C-m"     'org-agenda-switch-to)
(org-defkey org-agenda-mode-map "\C-m"     'org-agenda-show)

;; (org-defkey org-agenda-mode-map "\C-p"     
;;             '(lambda ()
;;               (org-agenda-previous-line)
;;               (interactive)
;;               (org-agenda-show)
;;               ))
#+end_src

** Task and Agenda
   Imporve Performance:

#+begin_src emacs-lisp
;; (setq org-enforce-todo-dependencies t)
(setq org-agenda-inhibit-startup t)
(setq org-agenda-dim-blocked-tasks nil)
(setq org-agenda-use-tag-inheritance nil)
;; (setq org-agenda-ignore-drawer-properties '(effort appt category))
#+END_SRC

   Calendar and task:
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1)
(setq org-clock-persist t)
(org-clock-persistence-insinuate)

(setq org-emphasis-alist (quote (("*" '("*" (:foreground "#4FFF4F")) "<b>" "</b>")
                            ("/" italic "<i>" "</i>")
                            ("&" highlight "<font color=\"red\">" "</font>")
                            ("_" underline "<u>" "</u>")
                            ("=" org-code "<code>" "</code>" verbatim)
                            ("~" org-verbatim "" "" verbatim)
                            ("+" format-font-lock-strikethru-face "<del>" "</del>"))))

(setq org-fast-tag-selection-single-key (quote expert))

;; when task done
(setq org-log-done 'time)

;(setq org-log-done 'note)

(setq org-agenda-custom-commands
      '(("w" "Weekly Plan"
         ( (agenda)
           (todo "TODO" "STARTED")
           )
         )
        ("u" todo "WORK&URGENT" nil)
        ("c" todo "WORK&@PHONE" nil)
        ("h" todo "PERSONAL-@ERRANDS" nil)

        ("p" "Personal Plan" tags-todo ""
         ((org-agenda-files (file-expand-wildcards "~/private/org/todo/todo*.org"))
          (agenda)
          (tags-todo "")
          )
         )

        ("m" tags "WORK" nil)

        ("a" "My agenda"
         ((todo "STARTED")
          (org-agenda-list)
          ; (tags-todo "URGENT")
          ; (tags "PROJECT-MAYBE-DONE")
          ))
        
        ("H" "Home NA Lists"
         ( (agenda)
           (tags-todo "HOME")
           (tags-todo "COMPUTER")
           )
         )
        ;; ... put your other custom commands here
        ))
#+end_src

** Project and publish
#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/private/org/"
         :publishing-directory "~/private/org/html"
         :publishing-function org-html-publish-to-html
         :section-numbers nil
         :table-of-contents nil
         :inline-images t
         :recursive t
;;       :style "<link rel=\"stylesheet\"
;;                      href=\"../other/mystyle.css\"
;;                      type=\"text/css\">"
         :style "<link rel=\"stylesheet\" href=\"org.css\" type=\"text/css\">"
         )
        ("css"
         :base-directory "~/private/org/html/css"
         :base-extension "css")
        ("img"
         :base-directory "~/private/org/html/img"
         :base-extension "jpg|png|gif")
        ))
#+end_src

** Capture
    =remember= had been replaced by =org-remember=, and then replaced by
    =org-capture= since org 8.0
    
#+begin_src emacs-lisp
(require 'org-capture)
(global-set-key "\C-cr" 'org-capture)

(setq org-capture-templates
      '(
        ;; todo list, GTD
        ("t" "Todo (work)" entry (file+datetree "~/private/org/todo/todo-work.org")  "* TODO %^{topic} %^g\nAdded: %U\n\n%?\n" :empty-lines 1)
        ("p" "Todo (Personal)" entry (file+datetree "~/private/org/todo/todo-personal.org")  "* TODO %^{topic} %^g\nAdded: %U\n\n%?\n" :empty-lines 1)

        ("s" "slim goal review" entry (file+datetree "~/private/org/notes/todo-work.org") "Sprint Goal Review :slim:"
         "* sprint goal review %U :sprint: \n%[~/private/org/templates/sprint-goals.org]\n"  :prepend t :empty-lines 1)

        ;; Reviews and Journanl
        ("r" "Daily Review" entry (file+datetree "~/private/org/notes/review.org") "Daily Report :review:"
         "* daily review %U :Daily: \n%[~/private/org/templates/dailyreport.txt]\n"  :prepend t :empty-lines 1)
        ("j" "Journal" entry (file+datetree "~/private/org/notes/journal.org")  "* %U - %^{Title} :journal:\n %?" :empty-lines 1)
        ("l" "Log Time" entry (file+datetree "~/private/org/notes/timelog.org")  "* %U - %^{Title}\n%?")

        ;; notes for study, management, ideas
        ("n" "Notes" entry
         (file+headline "~/private/org/notes/notes.org" "Notes")
         "* %^{topic} %u %^g\n%?\n" :prepend t :empty-lines 1)
        ("w" "Works" entry
         (file+headline "~/private/org/notes/works.org" "Works")
         "* %^{topic} %u %^g\n%?\n" :prepend t :empty-lines 1)
        ("m" "Management" entry
         (file+headline "~/private/org/notes/notes.management.org" "Management")
         "* %^{topic} %u %^g\n%?\n" :prepend t :empty-lines 1)

        ;; finance
        ("f" "Finance" entry (file+headline "~/private/org/notes/finance.org" "Finance")  "* %^{topic} %u %^g\n%?\n" :prepend t :empty-lines 1)
        ("b" "Bitcoin" entry (file+headline "~/private/org/notes/finance.org" "Finance")  
         "* [/] bitcoin %u :record:\n%[~/private/org/templates/org.template.bitcoin.txt]\n" :prepend t :empty-lines 1)
        ))
#+end_src

** Font
    Don't use the emphasized text in EMACS view, it will still work for
    publishing underline, bold, italic, etc.

#+begin_src emacs-lisp
(setq org-fontify-emphasized-text t)
#+end_src

** Image
#+begin_src emacs-lisp
(defun org-dblock-write:image (params)
  (let ((file (plist-get params :file)))
    (clear-image-cache file)
    (insert image (create-image file) )))
#+end_src

** "TODO" status
    Set TODO status: sequence, shortcut and faces.

    The ! after the slash means that in addition to the note taken when
    entering the state, a timestamp should be recorded when leaving the WAIT
    state, if and only if the target state does not configure logging for
    entering it.

    Special markers:
    - ! (for a timestamp) and,
    - @ (for a note)

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "STARTED(s!)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(x)" "DEFERRED(f)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELLED(x)")
        (sequence "QUOTE(q!)" "QUOTED(Q!)" "|" "APPROVED(A@)" "EXPIRED(E@)" "REJECTED(R@)")))

(setq org-todo-keyword-faces
      '(("TODO"      . org-warning)
        ("DEFERRED"  . shadow)
        ("CANCELLED"  . (:foreground "green"))
        ("DONE" :foreground "forest green")
        ("WAITING" :foreground "orange" :weight bold)
        ("STARTED" :foreground "orange" :weight bold)
        ("NEXT" :foreground "blue" :weight bold)
        ))
#+end_src

** Font in Agenda
#+begin_src emacs-lisp
(custom-set-variables
 ;; here there is customization for other variables 
 ; '(org-priority-faces (quote ((65 . "DeepPink") (66 . "firebrick") (67 . "tomato"))))
 '(org-priority-faces (quote ((65 . "DeepPink") (66 . "firebrick") (67 . "white"))))
)

(defun color-org-header (tag col)
  ""
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward tag nil t)
    (add-text-properties (match-beginning 0) (point-at-eol)
                         `(face (:foreground ,col )  )))
  (goto-char (point-min))
  (while (re-search-forward "TODO" nil t)
    (add-text-properties (match-beginning 0) (match-end 0)
                         `(face (:foreground "white" ))))
  (goto-char (point-min))
  (while (re-search-forward "STARTED" nil t)
    (add-text-properties (match-beginning 0) (match-end 0)
                         `(face (:foreground "red" ))))
  (goto-char (point-min))
  (while (re-search-forward "DONE" nil t)
    (add-text-properties (match-beginning 0) (match-end 0)
                         `(face (:foreground "green" :strike-through ) )))
  )

(add-hook 'org-finalize-agenda-hook
          (lambda ()
            (save-excursion
              (color-org-header "personal:"  "green")
              (color-org-header "birthdays:" "gold")
              (color-org-header "work:"      "orange"))))
#+end_src

** Holidays
#+begin_src emacs-lisp
(setq christian-holidays nil)
(setq hebrew-holidays  nil)
(setq islamic-holidays nil)

;; (setq general-holidays
;;       '((holiday-fixed 1 1 "元旦")
;;         (holiday-fixed 2 14 "情人节")
;;         (holiday-fixed 3 14 "白色情人节")
;;         (holiday-fixed 4 1 "愚人节")
;;         (holiday-fixed 5 1 "劳动节")
;;         (holiday-float 5 0 2 "母亲节")
;;         (holiday-fixed 6 1 "儿童节")
;;         (holiday-float 6 0 3 "父亲节")
;;         (holiday-fixed 7 1 "建党节")
;;         (holiday-fixed 8 1 "建军节")
;;         (holiday-fixed 9 10 "教师节")
;;         (holiday-fixed 10 1 "国庆节")
;;         (holiday-fixed 12 25 "圣诞节")))

(setq mark-holidays-in-calendar t)
;; (setq calendar-holidays (append general-holidays local-holidays))

(require 'cal-china-x)
(setq calendar-holidays cal-china-x-chinese-holidays)
#+end_src

** Personal holidays
#+begin_src emacs-lisp :tangle no
(setq personal-holiday-file "~/private/org/todo/holidays.el")
(if (file-exists-p personal-holiday-file)
    (progn
      (load-file personal-holiday-file)
      (setq calendar-holidays
            (append calendar-holidays personal-holidays))))
#+end_src
** Encoding
#+begin_src emacs-lisp
(require 'org)

;; display english week name in timestamp
;; put this at the end of org-init.el
(setq system-time-locale "C")
(setq system-time-locale "en_US.utf8")
(setq org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%m/%d/%y>" . "<%m/%d/%y %a %H:%M>"))
#+end_src
** Chinese HTML spaces
#+begin_src emacs-lisp
(defadvice org-html-paragraph (before org-html-paragraph-advice
                                      (paragraph contents info) activate)
  "Join consecutive Chinese lines into a single long line without
unwanted space when exporting org-mode to html."
  (let* ((origin-contents (ad-get-arg 1))
         (fix-regexp "[[:multibyte:]]")
         (fixed-contents
          (replace-regexp-in-string
           (concat
            "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" origin-contents)))

    (ad-set-arg 1 fixed-contents)))
#+end_src
* Markdown
#+begin_src emacs-lisp
  (autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t) 
  (setq auto-mode-alist (cons '("\\.text" . markdown-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.md" . markdown-mode) auto-mode-alist))
#+end_src

* Shell Tools
#+begin_src emacs-lisp
  (defun create-shell ()
    "creates a shell with a given name"
    (interactive);; "Prompt\n shell name:")
    (let ((shell-name (read-string "shell name: " nil)))
      (shell (concat "*shell-" shell-name "*"))))

  (defun clear-shell ()                                                                                          
    (interactive)
    (let ((comint-buffer-maximum-size 0))                                                                        
      (comint-truncate-buffer)))

  ;; kill "Completions" buffer
  (add-hook 'minibuffer-exit-hook 
            '(lambda ()
               (let ((buffer "*Completions*"))
                 (and (get-buffer buffer)
                      (kill-buffer buffer)))))
#+end_src

** For windows

#+begin_src emacs-lisp
(defun cygwin-shell ()
  "Run cygwin bash in shell mode."
  (interactive)
  (let ((explicit-shell-file-name "C:/cygwin64/bin/bash"))
    (call-interactively 'shell)))

(when *win32*
  (setq explicit-shell-file-name "C:/cygwin64/bin/bash")
  (setq explicit-sh-args '("-login" "-i"))
  )
#+end_src

** Internet Relay Chat
   IRC is a great way to hang out with other Emacs geeks.
#+begin_src emacs-lisp :tangle no
     (use-package erc
       :ensure erc
       :config
       (setq erc-autojoin-channels-alist '(("freenode.net"
					    "#org-mode"
					    "#hacklabto"
					    "#emacs"))
	     erc-server "irc.freenode.net"
	     erc-nick "guli"))
#+end_src
   
** Ace Jump mode
   Quickly jump to a position in the current view.

#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :ensure ace-jump-mode)
  ;; I use the jj key-chord for this; see the definitions for key-chord
#+end_src

Ace Window looks useful too.

#+begin_src emacs-lisp
(use-package ace-window
  :ensure ace-window
  :config (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
  :bind ("C-x o" . ace-window))
#+end_src

And ace-isearch...

TODO: install ace-isearch
[[https://github.com/tam17aki/ace-isearch.git]]
#+begin_src emacs-lisp  :tangle no
(use-package ace-isearch
  :ensure ace-isearch
  :init (global-ace-isearch-mode 1))
#+end_src

And ace-jump-zap...

#+begin_src emacs-lisp
(use-package ace-jump-zap
  :ensure ace-jump-zap
  :bind
  (("M-z" . ace-jump-zap-up-to-char-dwim)
   ("C-M-z" . ace-jump-zap-to-char-dwim)))
#+end_src
   
** Other nifty Emacs things I want to learn
*** Smartparens mode						      :drill:
#+begin_src emacs-lisp
(use-package smartparens
  :ensure smartparens
  :diminish smartparens
  :config
  (progn
    (require 'smartparens-config)
    (add-hook 'emacs-lisp-mode-hook 'smartparens-mode)
    (add-hook 'emacs-lisp-mode-hook 'show-smartparens-mode)

    ;; keybinding management
    (define-key sp-keymap (kbd "C-c s r n") 'sp-narrow-to-sexp)
    (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
    (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
    (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
    (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
    (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
    (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)

    (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
    (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
    (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
    (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

    (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
    (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

    (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
    (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)

    (define-key sp-keymap (kbd "M-<delete>") 'sp-unwrap-sexp)
    (define-key sp-keymap (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

    (define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
    (define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
    (define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
    (define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)

    (define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
    (define-key sp-keymap (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
    (define-key sp-keymap (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
    (define-key sp-keymap (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

    (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
    (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
    (define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)

    (define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)
    (define-key sp-keymap (kbd "M-B") 'sp-backward-symbol)

    (define-key sp-keymap (kbd "C-c s t") 'sp-prefix-tag-object)
    (define-key sp-keymap (kbd "C-c s p") 'sp-prefix-pair-object)
    (define-key sp-keymap (kbd "C-c s c") 'sp-convolute-sexp)
    (define-key sp-keymap (kbd "C-c s a") 'sp-absorb-sexp)
    (define-key sp-keymap (kbd "C-c s e") 'sp-emit-sexp)
    (define-key sp-keymap (kbd "C-c s p") 'sp-add-to-previous-sexp)
    (define-key sp-keymap (kbd "C-c s n") 'sp-add-to-next-sexp)
    (define-key sp-keymap (kbd "C-c s j") 'sp-join-sexp)
    (define-key sp-keymap (kbd "C-c s s") 'sp-split-sexp)

    ;; pair management

    (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
    (sp-local-pair 'web-mode "<" nil :when '(guli/sp-web-mode-is-code-context))

    ;; markdown-mode
    (sp-with-modes '(markdown-mode gfm-mode rst-mode)
      (sp-local-pair "*" "*" :bind "C-*")
      (sp-local-tag "2" "**" "**")
      (sp-local-tag "s" "```scheme" "```")
      (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

    ;; tex-mode latex-mode
    (sp-with-modes '(tex-mode plain-tex-mode latex-mode)
      (sp-local-tag "i" "1d5f8e69396c521f645375107197ea4dfbc7b792quot;<" "1d5f8e69396c521f645375107197ea4dfbc7b792quot;>"))

    ;; html-mode
    (sp-with-modes '(html-mode sgml-mode web-mode)
      (sp-local-pair "<" ">"))

    ;; lisp modes
    (sp-with-modes sp--lisp-modes
      (sp-local-pair "(" nil :bind "C-("))))
#+end_src

** Startup
   Show agenda is toooooo slow.... :-(
#+begin_src emacs-lisp
(add-hook 'after-init-hook (lambda () (org-agenda nil "a")))
#+end_src

* Other cool configs you may want to check out
<<links>>

- [[http://doc.norang.ca/org-mode.html][Bernt Hansen]]: Lots of Org-related config. I picked up the graph-drawing stuff from this.
- [[http://bzg.fr/emacs.html][Bastien Guerry]]: Org, Gnus, ERC - Explained in this [[http://sachachua.com/blog/2013/05/emacs-chat-bastien-guerry/][Emacs Chat (~1h)]]
- [[https://github.com/iani/emacs-prelude][Iannis Zannos]]: Explained in this [[https://www.youtube.com/watch?v=0F8aCbC9z3A][Emacs Chat (~1h)]]
- [[https://github.com/magnars/.emacs.d][Magnar Sveen]]: http://whattheemacsd.com/ has some explanations. [[http://sachachua.com/blog/2013/11/emacs-chat-magnar-sveen-emacs-rocks/][Emacs Chat (~1h)]]
- [[https://github.com/jwiegley/dot-emacs][John Wiegley]]: Also see his [[http://www.youtube.com/watch?v=RvPFZL6NJNQ][Emacs Lisp Development talk]] (sorry, sucky video) and [[http://www.youtube.com/watch?v=ytNsHmRLZGM][Emacs Chat video]]

* cscope
#+begin_src emacs-lisp
(require 'xcscope)
(setq cscope-do-not-update-database t)

(define-key global-map [(control f3)]  'cscope-set-initial-directory)
(define-key global-map [(control f4)]  'cscope-unset-initial-directory)
(define-key global-map [(control f5)]  'cscope-find-this-symbol)
(define-key global-map [(control f6)]  'cscope-find-global-definition)
(define-key global-map [(control f7)]  'cscope-find-global-definition-no-prompting)
(define-key global-map [(control f8)]  'cscope-pop-mark)
(define-key global-map [(control f9)]  'cscope-history-forward-line)
(define-key global-map [(control f10)] 'cscope-history-forward-file)
(define-key global-map [(control f11)] 'cscope-history-backward-line)
(define-key global-map [(control f12)] 'cscope-history-backward-file)
(define-key global-map [(meta f9)]  'cscope-display-buffer)
(define-key global-map [(meta f10)] 'cscope-display-buffer-toggle)
#+end_src

* doxygen
#+begin_src emacs-lisp
(require 'doxymacs)
(add-hook 'c-mode-common-hook 'doxymacs-mode)
#+end_src
* Path and ENV
#+begin_src emacs-lisp
(setenv "PATH" (concat "\"c:/program files/postgresql/9.3/bin;\"" (getenv "PATH")))

(if *win32*
    (progn
      (setenv "PATH" (concat "c:/cygwin64/bin;" (getenv "PATH")))
      (setenv "SHELL" "c:/cygwin64/bin/bash"))
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  (setq shell-file-name "c:/cygwin64/bin/bash")
)

(if (equal system-type `darwin)
    (setenv "PATH" (concat (getenv "PATH")
                           ":/usr/local/Cellar/cscope/15.8a/bin")))
#+end_src
  
* Bug fix
** A strange bug on linux
   Cannot start "git-status" because scroll-bar and fringe is not loaded.
   
#+BEGIN_SRC emacs-lisp
(require 'scroll-bar)
(require 'fringe)
#+END_SRC
